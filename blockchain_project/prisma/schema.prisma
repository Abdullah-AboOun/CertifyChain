// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Issuing Entity Model
model IssuingEntity {
    id                String        @id @default(cuid())
    walletAddress     String        @unique
    name              String
    description       String?
    isActive          Boolean       @default(true)
    registeredAt      DateTime      @default(now())
    updatedAt         DateTime      @updatedAt
    
    // Blockchain data
    blockchainId      String?       // ID on the blockchain (sequential uint256 as string)
    transactionHash   String?       // Registration transaction hash
    
    certificates      Certificate[]
    user              User?         @relation(fields: [userId], references: [id])
    userId            String?
    
    @@index([walletAddress])
}

// Certificate Model
model Certificate {
    id                Int            @id @default(autoincrement())
    blockchainId      String?        @unique // Blockchain bytes32 ID (hex string)
    certificateHash   String         @unique // Server-generated hash
    recipientName     String
    recipientEmail    String?
    description       String?        // Optional description
    documentUrl       String?        // URL to certificate document
    
    issuedAt          DateTime       @default(now())
    isRevoked         Boolean        @default(false)
    revokedAt         DateTime?
    
    // Blockchain data
    transactionHash   String?        // Issuance transaction hash
    revokeTxHash      String?        // Revoke transaction hash
    
    issuer            IssuingEntity  @relation(fields: [issuerId], references: [id])
    issuerId          String
    
    @@index([certificateHash])
    @@index([recipientEmail])
    @@index([blockchainId])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id               String           @id @default(cuid())
    name             String?
    email            String?          @unique
    emailVerified    DateTime?
    image            String?
    walletAddress    String?          @unique
    accounts         Account[]
    sessions         Session[]
    issuingEntity    IssuingEntity[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
